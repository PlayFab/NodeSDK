# -*- coding: utf-8 -*-
#Copyright (c) 2007, Andy Armstrong
#
#The "Artistic License"
#
#Preamble
#
#The intent of this document is to state the conditions under which a Package may be copied, such that the Copyright Holder maintains some semblance of artistic control over the development of the package, while giving the users of the package the right to use and distribute the Package in a more-or-less customary fashion, plus the right to make reasonable modifications.
#
#Definitions:
#
#"Package" refers to the collection of files distributed by the Copyright Holder, and derivatives of that collection of files created through textual modification.
#
#"Standard Version" refers to such a Package if it has not been modified, or has been modified in accordance with the wishes of the Copyright Holder as specified below.
#
#"Copyright Holder" is whoever is named in the copyright or copyrights for the package.
#
#"You" is you, if you're thinking about copying or distributing this Package.
#
#"Reasonable copying fee" is whatever you can justify on the basis of media cost, duplication charges, time of people involved, and so on.  (You will not be required to justify it to the Copyright Holder, but only to the computing community at large as a market that must bear the fee.)
#
#"Freely Available" means that no fee is charged for the item itself, though there may be fees involved in handling the item. It also means that recipients of the item may redistribute it under the same conditions they received it.
#
#1. You may make and give away verbatim copies of the source form of the Standard Version of this Package without restriction, provided that you duplicate all of the original copyright notices and associated disclaimers.
#
#2. You may apply bug fixes, portability fixes and other modifications derived from the Public Domain or from the Copyright Holder.  A Package modified in such a way shall still be considered the Standard Version.
#
#3. You may otherwise modify your copy of this Package in any way, provided that you insert a prominent notice in each changed file stating how and when you changed that file, and provided that you do at least ONE of the following:
#
#a) place your modifications in the Public Domain or otherwise make them Freely Available, such as by posting said modifications to Usenet or an equivalent medium, or placing the modifications on a major archive site such as uunet.uu.net, or by allowing the Copyright Holder to include your modifications in the Standard Version of the Package.
#
#b) use the modified Package only within your corporation or organization.
#
#c) rename any non-standard executables so the names do not conflict with standard executables, which must also be provided, and provide a separate manual page for each non-standard executable that clearly documents how it differs from the Standard Version.
#
#d) make other distribution arrangements with the Copyright Holder.
#
#4. You may distribute the programs of this Package in object code or executable form, provided that you do at least ONE of the following:
#
#a) distribute a Standard Version of the executables and library files, together with instructions (in the manual page or equivalent) on where to get the Standard Version.
#
#b) accompany the distribution with the machine-readable source of the Package with your modifications.
#
#c) give non-standard executables non-standard names, and clearly document the differences in manual pages (or equivalent), together with instructions on where to get the Standard Version.
#
#d) make other distribution arrangements with the Copyright Holder.
#
#5. You may charge a reasonable copying fee for any distribution of this Package.  You may charge any fee you choose for support of this Package.  You may not charge a fee for this Package itself.  However, you may distribute this Package in aggregate with other (possibly commercial) programs as part of a larger (possibly commercial) software distribution provided that you do not advertise this Package as a product of your own.  You may embed this Package's interpreter within an executable of yours (by linking); this shall be construed as a mere form of aggregation, provided that the complete Standard Version of the interpreter is so embedded.
#
#6. The scripts and library files supplied as input to or produced as output from the programs of this Package do not automatically fall under the copyright of this Package, but belong to whoever generated them, and may be sold commercially, and may be aggregated with this Package.  If such scripts or library files are aggregated with this Package via the so-called "undump" or "unexec" methods of producing a binary executable image, then distribution of such an image shall neither be construed as a distribution of this Package nor shall it fall under the restrictions of Paragraphs 3 and 4, provided that you do not represent such an executable image as a Standard Version of this Package.
#
#7. C subroutines (or comparably compiled subroutines in other languages) supplied by you and linked into this Package in order to emulate subroutines and variables of the language defined by this Package shall not be considered part of this Package, but are the equivalent of input as in Paragraph 6, provided these subroutines do not change the language in any way that would cause it to fail the regression tests for the language.
#
#8. Aggregation of this Package with a commercial distribution is always permitted provided that the use of this Package is embedded; that is, when no overt attempt is made to make this Package's interfaces visible to the end user of the commercial distribution.  Such use shall not be construed as a distribution of this Package.
#
#9. The name of the Copyright Holder may not be used to endorse or promote products derived from this software without specific prior written permission.
#
#10. THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#The End
"""
Easy YAML serialisation compatible with TAP format.

Port of `Data::YAML Perl module <https://github.com/AndyA/Data--YAML>`,
satisfying all its tests, intended to be used for support of
`TAP <http://testanything.org/>` data format. Port of the original
documentation follows.

The syntax accepted by this module is a subset of `YAML <http://yaml.org>`.

===========
YAML syntax
===========

Although YAML appears to be a simple language, the entire YAML
specification is huge. This module implements a small subset of the
complete syntax trading completeness for compactness and simplicity.
This restricted syntax is known (to me at least) as 'YAMLish'.

These examples demonstrates the full range of supported syntax.

All YAML documents must begin with '---' and end with a line
containing '...'.

::

    --- Simple scalar
    ...

Unprintable characters are represented using standard escapes in double
quoted strings.

::

    --- "\\t\\x01\\x02\\n"
    ...

Array and hashes are represented thusly

::

    ---
      - "This"
      - "is"
      - "an"
      - "array"
    ...

    ---
      This: is
      a: hash
    ...

Structures may nest arbitrarily

::

    ---
      -
        name: 'Hash one'
        value: 1
      -
        name: 'Hash two'
        value: 2
    ...

Undef is a tilde

::

    --- ~
    ...

====
Uses
====

This module may be used any time you need to freeze and thaw Python
data structures into a human readable format. The output from
`yamlish.dump()` should be readable by any YAML parser.

The original Perl module was originally written to allow machine-readable
diagnostic information to be passed from test scripts to
the Perl module `TAP::Harness`. That means that if you're writing
a testing system that needs to output TAP version 13 or later
syntax you might find this module useful.

Read more about TAP and YAMLish on `<http://testanything.org/wiki>`

"""
from __future__ import absolute_import, print_function, unicode_literals
import logging
import yaml
import sys


class NullHandler(logging.Handler):
    def emit(self, record):
        pass

log = logging.getLogger("yamlish")
log.addHandler(NullHandler())
#log.setLevel(logging.DEBUG)

__docformat__ = 'reStructuredText'
__version__ = "0.10"
__author__ = u"MatÄ›j Cepl <mcepl_at_redhat_dot_com>"

py3k = sys.version_info[0] > 2

try:
    isinstance('a', basestring)
except NameError:
    basestring = (bytes, str)


class _YamlishLoader(yaml.loader.SafeLoader):
    """
    Remove a datetime resolving.

    YAMLish returns unchanged string.
    """
    def __init__(self, stream):
        yaml.loader.SafeLoader.__init__(self, stream)

    @classmethod
    def remove_implicit_resolver(cls, tag):
        """
        Remove an implicit resolver from a Loader class identified by its tag.
        """
        if not 'yaml_implicit_resolvers' in cls.__dict__:
            cls.yaml_implicit_resolvers = cls.yaml_implicit_resolvers.copy()
        for key in cls.yaml_implicit_resolvers:
            resolvers_set = cls.yaml_implicit_resolvers[key]
            for idx in range(len(resolvers_set)):
                if resolvers_set[idx][0] == tag:
                    del resolvers_set[idx]
            if len(resolvers_set) == 0:
                del cls.yaml_implicit_resolvers[key]

_YamlishLoader.remove_implicit_resolver(u'tag:yaml.org,2002:timestamp')


class _YamlishDumper(yaml.dumper.SafeDumper):
    pass


def str_representer_compact_multiline(dumper, data):
    style = None
    if not py3k and isinstance(data, str):
        # assumes all your strings are UTF-8 encoded
        data = data.decode('utf-8')
    if '\n' in data:
        style = '|'
    tag = u'tag:yaml.org,2002:str'
    return dumper.represent_scalar(tag, data, style)

if py3k:
    yaml.add_representer(bytes, str_representer_compact_multiline,
                         Dumper=_YamlishDumper)
    yaml.add_representer(str, str_representer_compact_multiline,
                         Dumper=_YamlishDumper)
else:
    yaml.add_representer(str, str_representer_compact_multiline,
                         Dumper=_YamlishDumper)
    yaml.add_representer(unicode, str_representer_compact_multiline,
                         Dumper=_YamlishDumper)


def load(source, ignore_wrong_characters=False):
    """
    Return object loaded from a YAML document in source.

    Source is either a representation of the YAML document itself
    or any document providing an iterator (that includes file, list, and
    many others).
    """
    out = None
    log.debug("inobj: (%s)\n%s", type(source), source)
    log.debug('before ignore_wrong_characters = %s', ignore_wrong_characters)
    if isinstance(source, basestring):
        out = yaml.load(source, Loader=_YamlishLoader)
        log.debug("out (string) = %s", out)
    elif hasattr(source, "__iter__"):
        inobj = u""
        for line in source:
            try:
                if not py3k or isinstance(line, bytes):
                    line = line.decode('utf8')
                logging.debug('inobj, line ... %s, %s',
                              type(inobj), type(line))
                inobj += line + u'\n'
            except UnicodeDecodeError:
                log.debug('in ignore_wrong_characters = %s',
                          ignore_wrong_characters)
                if ignore_wrong_characters:
                    inobj += line.decode('utf8', 'ignore') + '\n'
                else:
                    raise
        log.debug('restarting load with inobj as string')
        out = load(inobj, ignore_wrong_characters)
        log.debug("out (iter) = %s", out)
        log.debug("out (iter) = type %s", type(out))
    return out


def dump(source, destination):
    """
    Store source in destination file.

    Destination is either a file object or a string with a filename.
    """
    if isinstance(destination, basestring):
        with open(destination, "w") as outf:
            dump(source, outf)
    elif hasattr(destination, "fileno"):
        yaml.dump(source, destination, encoding="utf-8",
                  default_flow_style=False, canonical=False,
                  Dumper=_YamlishDumper)
    else:
        raise NameError


def dumps(source):
    """
    Return YAMLish string from given source.
    """
    return yaml.dump(source, encoding=None,
                     explicit_start=True, explicit_end=True,
                     default_flow_style=False, default_style=False,
                     canonical=False, Dumper=_YamlishDumper)
